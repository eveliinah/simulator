package simulaattorinrunko5FX.src.view;

import java.text.DecimalFormat;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import simulaattorinrunko5FX.src.controller.IKontrolleri;
import simulaattorinrunko5FX.src.controller.Kontrolleri;
import simulaattorinrunko5FX.src.simu.framework.Trace;
import simulaattorinrunko5FX.src.simu.framework.Trace.Level;

public class SimulaattorinGUI extends Application implements ISimulaattorinUI {

	// Kontrollerin esittely (tarvitaan käyttöliittymässä)
	private IKontrolleri kontrolleri;

	// Käyttöliittymäkomponentit:
	private TextField aika;
	private TextField viive;
	private Label kokAika = new Label();
	private Label asiakkaat = new Label();
	private Label t1 = new Label();
	private Label t2 = new Label();
	private Label t3 = new Label();
	private Label t4 = new Label();
	private Label t5 = new Label();
	private Label erityis = new Label();
	private Label laukut = new Label();
	private Label checkin = new Label();

	private Label viiveLabel;
	private Label aikaLabel;

	private Label kokonaisAikaLabel;
	private Label asiakkaatLabel;
	private Label keskLapimenoLabel;
	private Label keskLapimeno;
	private Label keskJononPituusLabel;
	private Label keskJononPituus;
	private Label valintaLabel;
	private Label ahkeruusLabel;
	private Button kaynnistaButton;
	private Button hidastaButton;
	private Button nopeutaButton;
	private Button tuloksetButton;
	private ChoiceBox<String> turvapisteValinta;
	private ChoiceBox<String> ahkeruusValinta1;
	private ChoiceBox<String> ahkeruusValinta2;
	private ChoiceBox<String> ahkeruusValinta3;
	private ChoiceBox<String> ahkeruusValinta4;
	private ChoiceBox<String> ahkeruusValinta5;
	private String[] ahkeruus = { "Ahkera", "Reipas", "Perus", "Laiska", "Vetelä" };
	private ObservableList<String> ahkeruusList = FXCollections.observableArrayList(ahkeruus);

	// diagrammien arvot
	private double lapiCheck;
	private double lapiLaukut;
	private double lapiT1;
	private double lapiT2;
	private double lapiT3;
	private double lapiT4;
	private double lapiT5;
	private double lapiErityis;
	private double kokOleskeluCheck;
	private double kokOleskeluLaukut;
	private double kokOleskeluT1;
	private double kokOleskeluT2;
	private double kokOleskeluT3;
	private double kokOleskeluT4;
	private double kokOleskeluT5;
	private double kokOleskeluErityis;
	private double jononPituusCheck;
	private double jononPituusLaukut;
	private double jononPituusT1;
	private double jononPituusT2;
	private double jononPituusT3;
	private double jononPituusT4;
	private double jononPituusT5;
	private double jononPituusErityis;

	private IVisualisointi naytto;

	@Override
	public void init() {

		Trace.setTraceLevel(Level.INFO);

		kontrolleri = new Kontrolleri(this);
	}

	@Override
	public void start(Stage primaryStage) {
		// Käyttöliittymän rakentaminen
		try {

			primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
				@Override
				public void handle(WindowEvent t) {
					Platform.exit();
					System.exit(0);
				}
			});

			primaryStage.setTitle("Simulaattori");

			kaynnistaButton = new Button();
			kaynnistaButton.setText("Käynnistä simulointi");
			kaynnistaButton.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event) {
					kontrolleri.palvelupisteidenMaara();
					kontrolleri.palvelupisteidenAhkeruus();
					kontrolleri.kaynnistaSimulointi();
					kaynnistaButton.setDisable(true);
				}
			});

			tuloksetButton = new Button("Tulokset");
			tuloksetButton.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event) {
					//
					((Kontrolleri) kontrolleri).asetaLapimenoajat();
					((Kontrolleri) kontrolleri).asetaKokonaisoleskeluajat();
					((Kontrolleri) kontrolleri).asetaJononpituudet();
					((Kontrolleri) kontrolleri).asetaSuoritustehot();
					setTuloksetScene();
				}
			});

			
			
			turvapisteValinta = new ChoiceBox<String>();
			turvapisteValinta.getItems().addAll("1", "2", "3", "4", "5");
			turvapisteValinta.setValue("1");

			turvapisteValinta.setOnAction(event -> {
				((Kontrolleri)kontrolleri).visuPaivitaNaytto();
			});

			valintaLabel = new Label("Turvatarkastuspisteiden määrä:");
			valintaLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

			ahkeruusValinta1 = new ChoiceBox<String>();
			ahkeruusValinta1.setItems(ahkeruusList);
			ahkeruusValinta1.setValue("Laiska");

			ahkeruusValinta2 = new ChoiceBox<String>();
			ahkeruusValinta2.setItems(ahkeruusList);

			ahkeruusValinta2.setValue("Laiska");

			ahkeruusValinta3 = new ChoiceBox<String>();
			ahkeruusValinta3.setItems(ahkeruusList);
			ahkeruusValinta3.setValue("Laiska");

			ahkeruusValinta4 = new ChoiceBox<String>();
			ahkeruusValinta4.setItems(ahkeruusList);
			ahkeruusValinta4.setValue("Laiska");

			ahkeruusValinta5 = new ChoiceBox<String>();
			ahkeruusValinta5.setItems(ahkeruusList);
			ahkeruusValinta5.setValue("Laiska");

			ahkeruusLabel = new Label("Valitse työntekijöiden ahkeruus:");
			ahkeruusLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

			hidastaButton = new Button();
			hidastaButton.setText("Hidasta");
			hidastaButton.setOnAction(e -> kontrolleri.hidasta());

			nopeutaButton = new Button();
			nopeutaButton.setText("Nopeuta");
			nopeutaButton.setOnAction(e -> kontrolleri.nopeuta());

			aikaLabel = new Label("Simulointiaika:");
			aikaLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
			aika = new TextField("Syötä aika");
			aika.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
			aika.setPrefWidth(150);

			viiveLabel = new Label("Viive:");
			viiveLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
			viive = new TextField("Syötä viive");
			viive.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
			viive.setPrefWidth(150);

			HBox hBox = new HBox();
			hBox.setPadding(new Insets(15, 12, 15, 12)); // marginaalit ylä, oikea, ala, vasen
			hBox.setSpacing(10); // noodien välimatka 10 pikseliä

			GridPane grid = new GridPane();
			grid.setAlignment(Pos.CENTER);
			grid.setVgap(10);
			grid.setHgap(5);

			grid.add(aikaLabel, 0, 0); // sarake, rivi
			grid.add(aika, 1, 0); // sarake, rivi
			grid.add(viiveLabel, 0, 1); // sarake, rivi
			grid.add(viive, 1, 1); // sarake, rivi
			grid.add(valintaLabel, 0, 2, 2, 1);
			grid.add(turvapisteValinta, 3, 2);
			grid.add(ahkeruusLabel, 0, 3, 2, 1);
			grid.add(ahkeruusValinta1, 3, 3);
			grid.add(ahkeruusValinta2, 4, 3);
			grid.add(ahkeruusValinta3, 5, 3);
			grid.add(ahkeruusValinta4, 6, 3);
			grid.add(ahkeruusValinta5, 7, 3);
			grid.add(kaynnistaButton, 0, 4); // sarake, rivi
			grid.add(nopeutaButton, 0, 5); // sarake, rivi
			grid.add(hidastaButton, 1, 5); // sarake, rivi
			grid.add(tuloksetButton, 0, 6);

			naytto = new Visualisointi(800, 600);
			
			// Täytetään boxi:
			hBox.getChildren().addAll(grid, (Canvas) naytto);

			Scene scene = new Scene(hBox);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Käyttöliittymän rajapintametodit (kutsutaan kontrollerista)

	@Override
	public double getAika() {
		return Double.parseDouble(aika.getText());
	}

	@Override
	public long getViive() {
		return Long.parseLong(viive.getText());
	}

	@Override
	public void setLoppuaika(double aika) {
		DecimalFormat formatter = new DecimalFormat("#0.00");
		this.kokAika.setText(formatter.format(aika));
	}

	@Override
	public void setPalvellutAsiakkaat(int asiakkaat) {
		// DecimalFormat formatter = new DecimalFormat("#0");
		this.asiakkaat.setText(String.valueOf(asiakkaat));

	}

	public void setSuoritustehot(double laukut, double t1, double t2, double t3, double t4, double t5, double check,
			double erityis) {
		final DecimalFormat df = new DecimalFormat("0.00");
		this.t1.setText(df.format(t1));
		this.t2.setText(df.format(t2));
		this.t3.setText(df.format(t3));
		this.t4.setText(df.format(t4));
		this.t5.setText(df.format(t5));
		this.erityis.setText(df.format(erityis));
		this.laukut.setText(df.format(laukut));
		this.checkin.setText(df.format(check));
	}

	public void setLapimenoajat(double laukut, double t1, double t2, double t3, double t4, double t5, double check,
			double erityis) {
		lapiCheck = check;
		lapiLaukut = laukut;
		lapiT1 = t1;
		lapiT2 = t2;
		lapiT3 = t3;
		lapiT4 = t4;
		lapiT5 = t5;
		lapiErityis = erityis;

	}

	public void setKokonaisoleskeluajat(double laukut, double t1, double t2, double t3, double t4, double t5,
			double check, double erityis) {
		kokOleskeluCheck = check;
		kokOleskeluLaukut = laukut;
		kokOleskeluT1 = t1;
		kokOleskeluT2 = t2;
		kokOleskeluT3 = t3;
		kokOleskeluT4 = t4;
		kokOleskeluT5 = t5;
		kokOleskeluErityis = erityis;

	}

	public void setJononpituudet(double laukut, double t1, double t2, double t3, double t4, double t5, double check,
			double erityis) {
		jononPituusCheck = check;
		jononPituusLaukut = laukut;
		jononPituusT1 = t1;
		jononPituusT2 = t2;
		jononPituusT3 = t3;
		jononPituusT4 = t4;
		jononPituusT5 = t5;
		jononPituusErityis = erityis;

	}

	@Override
	public IVisualisointi getVisualisointi() {
		return naytto;
	}

	@Override
	public int getMontakoPalvelupistettä() {
		int luku = turvapisteValinta.getSelectionModel().getSelectedIndex();
		return luku;
	}

	@Override
	public int[] getTurvapisteAhkeruus() {
		int[] valinnat = new int[5];
		valinnat[0] = ahkeruusValinta1.getSelectionModel().getSelectedIndex();
		valinnat[1] = ahkeruusValinta2.getSelectionModel().getSelectedIndex();
		valinnat[2] = ahkeruusValinta3.getSelectionModel().getSelectedIndex();
		valinnat[3] = ahkeruusValinta4.getSelectionModel().getSelectedIndex();
		valinnat[4] = ahkeruusValinta5.getSelectionModel().getSelectedIndex();
		return valinnat;
	}

	// JavaFX-sovelluksen (käyttöliittymän) käynnistäminen

	public static void main(String[] args) {
		launch(args);
	}

	private void setTuloksetScene() {
		Stage newWindow = new Stage();
		BorderPane root = new BorderPane();
		GridPane grid = new GridPane();
		root.setCenter(grid);
		root.setPadding(new Insets(30, 30, 20, 10));
		grid.setAlignment(Pos.CENTER);
		grid.setVgap(10);
		grid.setHgap(50);

		Scene secondScene = new Scene(root, 1500, 700);

		newWindow.setScene(secondScene);

		newWindow.setTitle("Tulokset");

		VBox vasOtsikotVBox = new VBox();
		VBox vasTuloksetVBox = new VBox();
		vasOtsikotVBox.setSpacing(10);
		vasTuloksetVBox.setSpacing(10);
		vasTuloksetVBox.setMaxWidth(100);

		String checkInS = "Lähtösel.";
		String laukutS = "Matkatavarat";
		String turva1S = "T1";
		String turva2S = "T2";
		String turva3S = "T3";
		String turva4S = "T4";
		String turva5S = "T5";
		String erityisS = "ErityisT";

		// Keskimääräinene läpimenoaika pylväsdiagrammi
		CategoryAxis xAxisAjat = new CategoryAxis();
		NumberAxis yAxisAjat = new NumberAxis();
		BarChart<String, Number> lapimenoajatBC = new BarChart<String, Number>(xAxisAjat, yAxisAjat);
		lapimenoajatBC.setTitle("Palvelupisteiden läpimenoajat");
		xAxisAjat.setLabel("Palvelupiste");
		yAxisAjat.setLabel("Aika");

		final XYChart.Series<String, Number> seriesLapiMenoAjat = new XYChart.Series<>();
		seriesLapiMenoAjat.setName("Keskimääräinen läpimenoaika");
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(checkInS, lapiCheck));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(laukutS, lapiLaukut));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(turva1S, lapiT1));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(turva2S, lapiT2));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(turva3S, lapiT3));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(turva4S, lapiT4));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(turva5S, lapiT5));
		seriesLapiMenoAjat.getData().add(new XYChart.Data<>(erityisS, lapiErityis));

		lapimenoajatBC.getData().add(seriesLapiMenoAjat);

		// Kokonaisoleskeluajat diagrammi

		CategoryAxis xAxisKok = new CategoryAxis();
		NumberAxis yAxisKok = new NumberAxis();
		BarChart<String, Number> kokonaisajatBC = new BarChart<String, Number>(xAxisKok, yAxisKok);
		kokonaisajatBC.setTitle("Palvelupisteiden kokonaisoleskeluajat");
		xAxisAjat.setLabel("Palvelupiste");
		yAxisAjat.setLabel("Aika");

		final XYChart.Series<String, Number> seriesOleskelu = new XYChart.Series<>();
		seriesOleskelu.setName("Kokonaisoleskeluaika");
		seriesOleskelu.getData().add(new XYChart.Data<>(checkInS, kokOleskeluCheck));
		seriesOleskelu.getData().add(new XYChart.Data<>(laukutS, kokOleskeluLaukut));
		seriesOleskelu.getData().add(new XYChart.Data<>(turva1S, kokOleskeluT1));
		seriesOleskelu.getData().add(new XYChart.Data<>(turva2S, kokOleskeluT2));
		seriesOleskelu.getData().add(new XYChart.Data<>(turva3S, kokOleskeluT3));
		seriesOleskelu.getData().add(new XYChart.Data<>(turva4S, kokOleskeluT4));
		seriesOleskelu.getData().add(new XYChart.Data<>(turva5S, kokOleskeluT5));
		seriesOleskelu.getData().add(new XYChart.Data<>(erityisS, kokOleskeluErityis));

		kokonaisajatBC.getData().add(seriesOleskelu);

		// .setStyle("-fx-bar-fill: navy;");

		// Jonon pituus pylväsdiagrammi
		CategoryAxis xAxisJono = new CategoryAxis();
		NumberAxis yAxisJono = new NumberAxis();
		BarChart<String, Number> jonoBC = new BarChart<String, Number>(xAxisJono, yAxisJono);
		jonoBC.setTitle("Palvelupisteiden jonojen pituudet");
		xAxisJono.setLabel("Palvelupiste");
		yAxisJono.setLabel("Pituus");

		final XYChart.Series<String, Number> seriesJono = new XYChart.Series<>();
		seriesJono.setName("Keskimääräinen jononpituus");
		seriesJono.getData().add(new XYChart.Data<>(checkInS, jononPituusCheck));
		seriesJono.getData().add(new XYChart.Data<>(laukutS, jononPituusLaukut));
		seriesJono.getData().add(new XYChart.Data<>(turva1S, jononPituusT1));
		seriesJono.getData().add(new XYChart.Data<>(turva2S, jononPituusT2));
		seriesJono.getData().add(new XYChart.Data<>(turva3S, jononPituusT3));
		seriesJono.getData().add(new XYChart.Data<>(turva4S, jononPituusT4));
		seriesJono.getData().add(new XYChart.Data<>(turva5S, jononPituusT5));
		seriesJono.getData().add(new XYChart.Data<>(erityisS, jononPituusErityis));

		jonoBC.getData().add(seriesJono);

		// Lisätätään pylväsdiagrammit VBoxiin
		VBox kuvaajat = new VBox();
		kuvaajat.setPrefWidth(600);
		kuvaajat.setPrefHeight(1000);
		kuvaajat.setSpacing(50);
		kuvaajat.setPadding(new Insets(30, 5, 30, 5));
		kuvaajat.getChildren().addAll(lapimenoajatBC, kokonaisajatBC, jonoBC);

//muut tulokset
		Node otsikko = new Label("Tulokset");
		((Label) otsikko).setFont(Font.font("Arial", FontWeight.BOLD, 50));
		BorderPane.setAlignment(otsikko, Pos.TOP_CENTER);

		// Labelit joissa pysyvät tekstit
		Label asiakkaatLabel = new Label("Palvellut asiakkaat:");
		asiakkaatLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label kokonaisAikaLabel = new Label("Kokonaisaika:");
		kokonaisAikaLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Node suoritustehoLabel = new Label("Palvelupisteiden suoritustehot:");
		VBox.setMargin(suoritustehoLabel, new Insets(20, 0, 0, 0));
		((Label) suoritustehoLabel).setFont(Font.font("Tahoma", FontWeight.NORMAL, 22));

		Label selitysLabel = new Label("(palveltujen asiakkaiden lukumäärä aikayksikössä)");
		selitysLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 12));

		Label laukutLabel = new Label("Matkatavaroiden luovutuspiste:");
		VBox.setMargin(laukutLabel, new Insets(10, 0, 0, 0));
		laukutLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label checkinLabel = new Label("Lähtöselvitys:");
		checkinLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label t1Label = new Label("Turvatarkastuspiste 1:");
		t1Label.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label t2Label = new Label("Turvatarkastuspiste 2:");
		t2Label.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label t3Label = new Label("Turvatarkastuspiste 3:");
		t3Label.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label t4Label = new Label("Turvatarkastuspiste 4:");
		t4Label.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label t5Label = new Label("Turvatarkastuspiste 5:");
		t5Label.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		Label erityisLabel = new Label("Erityisturvatarkastus:");
		erityisLabel.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		vasOtsikotVBox.getChildren().addAll(kokonaisAikaLabel, asiakkaatLabel, suoritustehoLabel, selitysLabel,
				laukutLabel, checkinLabel, t1Label, t2Label, t3Label, t4Label, t5Label, erityisLabel);

		// Labelit joihin asetetaan tulokset
		Label tyhja = new Label("");
		Label tyhja2 = new Label("");
		VBox.setMargin(tyhja, new Insets(20, 0, 0, 0));
		tyhja.setFont(Font.font("Tahoma", FontWeight.NORMAL, 22));
		tyhja2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 12));

		asiakkaat.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		kokAika.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		t1.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		t2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		t3.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		t4.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		t5.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		erityis.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		laukut.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
		VBox.setMargin(laukut, new Insets(10, 0, 0, 0));

		checkin.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));

		vasTuloksetVBox.getChildren().addAll(kokAika, asiakkaat, tyhja, tyhja2, laukut, checkin, t1, t2, t3, t4, t5,
				erityis);

		ScrollPane sp = new ScrollPane();
		sp.setMaxHeight(340);
		sp.setPrefSize(620, 340);
		sp.setContent(kuvaajat);
		Button tietokantaBtn = new Button("Hae tietokannasta");
		tietokantaBtn.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				setValintaScene();
			}
		});
		BorderPane.setAlignment(tietokantaBtn, Pos.BOTTOM_RIGHT);
		root.setTop(otsikko);
		root.setBottom(tietokantaBtn);
		GridPane.setMargin(sp, new Insets(0, 0, 0, 100));
		grid.add(vasOtsikotVBox, 0, 1);
		grid.add(vasTuloksetVBox, 1, 1);
		grid.add(sp, 2, 1);

		newWindow.setScene(secondScene);
		newWindow.show();
	}

	private void setValintaScene() {
		Stage newWindow = new Stage();
		BorderPane root = new BorderPane();
		ListView<String> lw = new ListView<>(getTietokantaLista());
		Node otsikko = new Label("Valitse simulointikerta");
		((Label) otsikko).setFont(Font.font("Arial", FontWeight.SEMI_BOLD, 20));
		BorderPane.setAlignment(otsikko, Pos.TOP_CENTER);
		BorderPane.setMargin(otsikko, new Insets(0, 0, 20, 0));
		Button ok = new Button("OK");
		ok.setPrefSize(70, 10);
		BorderPane.setAlignment(ok, Pos.BOTTOM_CENTER);
		BorderPane.setMargin(ok, new Insets(20, 0, 10, 0));

		ok.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				/*
				 * ((Kontrolleri) kontrolleri).asetaLapimenoajat(); ((Kontrolleri)
				 * kontrolleri).asetaKokonaisoleskeluajat(); ((Kontrolleri)
				 * kontrolleri).asetaJononpituudet(); ((Kontrolleri)
				 * kontrolleri).asetaSuoritustehot();
				 */
				Stage stage = (Stage) ok.getScene().getWindow();

				stage.close();
			}
		});

		root.setCenter(lw);
		root.setTop(otsikko);
		root.setBottom(ok);
		root.setPadding(new Insets(30, 30, 30, 30));

		Scene secondScene = new Scene(root, 300, 500);

		newWindow.setScene(secondScene);

		newWindow.setTitle("Tietokanta");

		newWindow.setScene(secondScene);
		newWindow.show();
	}

	private ObservableList<String> getTietokantaLista() {

		ArrayList<String> lista = new ArrayList<>();
		lista.add("Ajo1");
		lista.add("Ajo2");
		lista.add("Ajo3");
		ObservableList<String> vaihtoehdot = FXCollections.observableArrayList(lista);
		return vaihtoehdot;
	}
}
