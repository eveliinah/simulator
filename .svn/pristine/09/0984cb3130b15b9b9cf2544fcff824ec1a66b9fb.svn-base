package simulaattorinrunko5FX.src.simu.model;

import java.util.ArrayList;
import java.util.Random;

import simulaattorinrunko5FX.src.controller.IKontrolleri;
import simulaattorinrunko5FX.src.eduni.distributions.Negexp;
import simulaattorinrunko5FX.src.eduni.distributions.Normal;
import simulaattorinrunko5FX.src.simu.framework.Kello;
import simulaattorinrunko5FX.src.simu.framework.Moottori;
import simulaattorinrunko5FX.src.simu.framework.Saapumisprosessi;
import simulaattorinrunko5FX.src.simu.framework.Tapahtuma;

public class OmaMoottori extends Moottori {

	private Saapumisprosessi s_laukut;
	private Saapumisprosessi s_checkin;
	Palvelupiste laukut1;
	Palvelupiste turva1;
	Palvelupiste turva2;
	Palvelupiste turva3;
	Palvelupiste turva4;
	Palvelupiste turva5;
	Palvelupiste checkin1;
	Palvelupiste erityisturva1;

	public OmaMoottori(IKontrolleri kontrolleri) { // UUSI

		super(kontrolleri); // UUSI
		// LinkedList<Asiakas> jono = new LinkedList<>();

		palvelupisteet = new Palvelupiste[8];
		laukut1 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_LAUKUT);
		turva1 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_TURVA1);
		turva2 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_TURVA2);
		turva3 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_TURVA3);
		turva4 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_TURVA4);
		turva5 = new Palvelupiste(new Normal(10, 10), tapahtumalista, TapahtumanTyyppi.P_TURVA5);
		checkin1 = new Palvelupiste(new Normal(5, 3), tapahtumalista, TapahtumanTyyppi.P_CHECKIN);
		erityisturva1 = new Palvelupiste(new Normal(5, 3), tapahtumalista, TapahtumanTyyppi.P_ERITYISTURVA);
		palvelupisteet[0] = laukut1;
		palvelupisteet[1] = turva1;
		palvelupisteet[2] = turva2;
		palvelupisteet[3] = turva3;
		palvelupisteet[4] = turva4;
		palvelupisteet[5] = turva5;
		palvelupisteet[6] = checkin1;
		palvelupisteet[7] = erityisturva1;

		s_checkin = new Saapumisprosessi(new Negexp(5, 15), tapahtumalista, TapahtumanTyyppi.S_CHECKIN);
		s_laukut = new Saapumisprosessi(new Negexp(5, 15), tapahtumalista, TapahtumanTyyppi.S_LAUKUT);

	}

	@Override
	protected void alustukset() {
		s_checkin.generoiSeuraava();
		s_laukut.generoiSeuraava();// Ensimmäinen saapuminen järjestelmään
	}

	@Override
	protected void suoritaTapahtuma(Tapahtuma t) { // B-vaiheen tapahtumat

		Asiakas a;
		switch (t.getTyyppi()) {

		case S_CHECKIN:
			checkin1.lisaaJonoon(new Asiakas());
			s_checkin.generoiSeuraava();
			kontrolleri.visualisoiLaukutonAsiakas();
			break;
		case S_LAUKUT:
			laukut1.lisaaJonoon(new Asiakas());
			s_laukut.generoiSeuraava();
			kontrolleri.visualisoiLaukkuAsiakas();
			break;
		case P_CHECKIN:
			a = checkin1.otaJonosta();
			Palvelupiste lisaaTahan = getLyhinJono();
			lisaaTahan.lisaaJonoon(a);

			break;
		case P_LAUKUT:
			a = laukut1.otaJonosta();
			Palvelupiste lisaaTahan1 = getLyhinJono();
			lisaaTahan1.lisaaJonoon(a);

			break;
		case P_TURVA1:
			a = turva1.otaJonosta();

			Random rand = new Random();
			int mihin = rand.nextInt(20);
			if (mihin == 1) {
				erityisturva1.lisaaJonoon(a);

				break;
			} else {
				a.setPoistumisaika(Kello.getInstance().getAika());

				a.raportti();
			}
			break;
		case P_TURVA2:
			a = turva2.otaJonosta();

			Random rand1 = new Random();
			int mihin1 = rand1.nextInt(20);
			if (mihin1 == 1) {
				erityisturva1.lisaaJonoon(a);

			} else {
				a.setPoistumisaika(Kello.getInstance().getAika());

				a.raportti();
			}
			break;
		case P_TURVA3:
			a = turva3.otaJonosta();

			Random rand2 = new Random();
			int mihin2 = rand2.nextInt(20);
			if (mihin2 == 1) {
				erityisturva1.lisaaJonoon(a);

			} else {
				a.setPoistumisaika(Kello.getInstance().getAika());
				a.raportti();
			}
			break;
		case P_TURVA4:
			a = turva4.otaJonosta();
			Random rand3 = new Random();
			int mihin3 = rand3.nextInt(20);
			if (mihin3 == 1) {
				erityisturva1.lisaaJonoon(a);

			} else {
				a.setPoistumisaika(Kello.getInstance().getAika());

				a.raportti();
			}
			break;
		case P_TURVA5:
			a = turva5.otaJonosta();

			Random rand4 = new Random();
			int mihin4 = rand4.nextInt(20);
			if (mihin4 == 1) {
				erityisturva1.lisaaJonoon(a);

			} else {
				a.setPoistumisaika(Kello.getInstance().getAika());
				a.raportti();
			}
			break;
		case P_ERITYISTURVA:
			a = erityisturva1.otaJonosta();
			a.setPoistumisaika(Kello.getInstance().getAika());

			a.raportti();

		}
	}

	@Override
	protected void tulokset() {
		int summa = 0;
		kontrolleri.naytaLoppuaika(Kello.getInstance().getAika());
		for (int i = 0; i < palvelupisteet.length; i++) {
			summa += palvelupisteet[i].getPalveltujenLkm();
		}
		kontrolleri.naytaPalvellutAsiakkkat(summa);

		System.out.println("Simulointi päättyi kello " + Kello.getInstance().getAika());
		System.out.println("Tulokset ... puuttuvat vielä");
		// palvelupistekohtaisesti: palveltujen + saapuneiden LKM
		// koko järjestelmän tasolla edelliset
	}

	public Palvelupiste getLyhinJono() {
		ArrayList<Palvelupiste> lista = new ArrayList<>();
		lista.add(turva1);
		lista.add(turva2);
		lista.add(turva3);
		lista.add(turva4);
		lista.add(turva5);
		Palvelupiste lyhin = turva1;

		for (Palvelupiste p : lista) {
			if (p.getJononPituus() < lyhin.getJononPituus()) {
				lyhin = p;
			}
		}

		return lyhin;
	}

}
